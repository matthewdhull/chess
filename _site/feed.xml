<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.9.0">Jekyll</generator><link href="/feed.xml" rel="self" type="application/atom+xml" /><link href="/" rel="alternate" type="text/html" /><updated>2021-01-12T09:38:45+01:00</updated><id>/feed.xml</id><title type="html">Chess with D3</title><subtitle>Notes on building chess visualizations</subtitle><entry><title type="html">Pawn Promotion, Capture, and Under-promotion</title><link href="/2020/12/28/Pawn-Promotion.html" rel="alternate" type="text/html" title="Pawn Promotion, Capture, and Under-promotion" /><published>2020-12-28T00:00:00+01:00</published><updated>2020-12-28T00:00:00+01:00</updated><id>/2020/12/28/Pawn%20Promotion</id><content type="html" xml:base="/2020/12/28/Pawn-Promotion.html">&lt;p&gt;Among the last types of moves to handle were pawn promotions. In SAN, these are expressed in the form &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;rank file = promoted piece&lt;/code&gt;, e.g., &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;e8=Q&lt;/code&gt; is the  movement of the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;e&lt;/code&gt;-file pawn to  &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;e8&lt;/code&gt; and subsequent promotion to queen.&lt;/p&gt;

&lt;p&gt;The promotion can be also be a capture, e.g., &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;hxg1=Q&lt;/code&gt;, the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;h&lt;/code&gt;-file  pawn captures at &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;g1&lt;/code&gt; and promotes to queen.&lt;/p&gt;

&lt;p&gt;Although rare, we support &lt;em&gt;under-promotion&lt;/em&gt;,  i.e., when the piece is promoted to something other than a queen. e.g., &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;c8=R&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/chess/images/pawn_promotion.gif&quot; alt=&quot;Pawn Promotion&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Commit &lt;a href=&quot;https://github.com/matthewdhull/chess/commit/22e79b0c6bdf618278a3b9e7dc10c03546d2eda8&quot;&gt;22e79b0&lt;/a&gt;&lt;/p&gt;</content><author><name>matthew</name></author><summary type="html">Among the last types of moves to handle were pawn promotions. In SAN, these are expressed in the form rank file = promoted piece, e.g., e8=Q is the movement of the e-file pawn to e8 and subsequent promotion to queen.</summary></entry><entry><title type="html">Game select and move indicator</title><link href="/2020/12/22/Game-Select-and-Move-Indicator.html" rel="alternate" type="text/html" title="Game select and move indicator" /><published>2020-12-22T00:00:00+01:00</published><updated>2020-12-22T00:00:00+01:00</updated><id>/2020/12/22/Game%20Select%20and%20Move%20Indicator</id><content type="html" xml:base="/2020/12/22/Game-Select-and-Move-Indicator.html">&lt;h4 id=&quot;game-select-and-move-indicators&quot;&gt;Game Select and Move Indicators&lt;/h4&gt;

&lt;p&gt;A few games are now available for play-through.  A simple indicator shows the current move.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/chess/images/move_indicator.gif&quot; alt=&quot;Move Indicator&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Commit &lt;a href=&quot;https://github.com/matthewdhull/chess/commit/a302b280b01ab2427bad67767b396f3b019aa2d2&quot;&gt;a302b28&lt;/a&gt;&lt;/p&gt;</content><author><name>matthew</name></author><summary type="html">Game Select and Move Indicators</summary></entry><entry><title type="html">Re Thinking rook movement</title><link href="/2020/12/20/Re-thinking-Rook-Movement.html" rel="alternate" type="text/html" title="Re Thinking rook movement" /><published>2020-12-20T00:00:00+01:00</published><updated>2020-12-20T00:00:00+01:00</updated><id>/2020/12/20/Re-thinking%20Rook%20Movement</id><content type="html" xml:base="/2020/12/20/Re-thinking-Rook-Movement.html">&lt;h4 id=&quot;re-thinking-rook-movement&quot;&gt;Re-thinking Rook Movement&lt;/h4&gt;

&lt;p&gt;This bug appeared while playing &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Rb1&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/chess/images/wrong_rook.gif&quot; alt=&quot;Wrong Rook Move&quot; /&gt;&lt;/p&gt;

&lt;p&gt;We should have white’s queen rook to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;b1&lt;/code&gt; but the method for calculating the positions for a rook resulted in both rooks being able to move along the 1st rank.  The method for translating implict moves described previously did not consider squares that would be illegal moves caused by intermediate pieces.  Given the board state shown below, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Rb1&lt;/code&gt; does not require any rank or file disambiguation in SAN.  Instead, we must internally deal with the disambiguation by only choosing the rook that could legally move to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;b1&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Below, we see the possible squares were originally calculated. The arrows span covers all possible squares considered.  In this case, it seems that both rooks can move to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;b1&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/chess/images/wrong_rook_logic.png&quot; alt=&quot;Wrong Rook Logic&quot; /&gt;&lt;/p&gt;

&lt;p&gt;To correct this, we try to find a path from the desired position, e.g., &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;b1&lt;/code&gt; to each rook and stop if an intermediate piece exists.  If we start at position &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;b1&lt;/code&gt; and move horizontally on rank 1, we find an intermediate piece on &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;d1&lt;/code&gt; and that only white’s queen rook on &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;a1&lt;/code&gt; can move to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;b1&lt;/code&gt;.  See &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;rookMovesFrom(fromPosition, toPosition, aBoard) &lt;/code&gt; &lt;a href=&quot;https://github.com/matthewdhull/chess/blob/a302b280b01ab2427bad67767b396f3b019aa2d2/scripts/pieces.js#L198&quot;&gt;code&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/chess/images/correct_rook_logic.png&quot; alt=&quot;Correct Rook Logic&quot; /&gt;&lt;/p&gt;</content><author><name>matthew</name></author><summary type="html">Re-thinking Rook Movement</summary></entry><entry><title type="html">Data Translation for D3</title><link href="/2020/12/10/Data-Translation-for-D3.html" rel="alternate" type="text/html" title="Data Translation for D3" /><published>2020-12-10T00:00:00+01:00</published><updated>2020-12-10T00:00:00+01:00</updated><id>/2020/12/10/Data%20Translation%20for%20D3</id><content type="html" xml:base="/2020/12/10/Data-Translation-for-D3.html">&lt;p&gt;All 32 pieces and occupied positions are represented in a dictionary can be retrieved in a manner like:&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;board[&quot;bq&quot;].position  //position of black's queen&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;When we parse a new move from the PGN file, we update only the piece(s) that are changing, instead of rebuilding the entire board state with each move. Then we pass the changes to D3 and allow it to handle the movement of our pieces on the board or take other actions, such as removing captured pieces.&lt;/p&gt;

&lt;p&gt;As discussed in an earlier post on reading PGN files, the SAN notation does not always cleanly indicate what piece movement or action is needed. In fact, that there are many ways to indicate a move:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;c5&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Nf3&lt;/code&gt;, and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Qa6a8&lt;/code&gt; are all ways to indicate simple movement of a piece from one square to the next&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Rxh5&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;cxd4&lt;/code&gt;, and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Rbxa1&lt;/code&gt; indicate both the movement of a piece and removal of another piece&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;O-O&lt;/code&gt; or &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;O-O-O&lt;/code&gt; indicate movement of two pieces (castling)&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;a8=Q&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;exd1=R&lt;/code&gt; indicates a movement, the removal of a piece, and the addition of another piece. (pawn promotion)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The following actions have been establish to categorize any move:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Move&lt;/li&gt;
  &lt;li&gt;Capture&lt;/li&gt;
  &lt;li&gt;Castle&lt;/li&gt;
  &lt;li&gt;Promote&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;By pairing pieces with one of these four actions, we translate a move from SAN into a change to the data model representing the board state.
While this is likely a misuse of javascript data structures, we use a pair of values of the form:&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;[&amp;lt;piece&amp;gt;, &amp;lt;position&amp;gt; | &amp;lt;flag&amp;gt;]&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;and pass them like a tuple.  The first value in the tuple will always be the piece identifier and the second value can be either a position, e.g., &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;a8&lt;/code&gt;, or a flag containing one of two special values indicating capture &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;'x'&lt;/code&gt; or promotion &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;'p'&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Examples:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;The move &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;c5&lt;/code&gt; could be translated to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;['wqbp', 'c5']&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;The move and capture &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Rxh5&lt;/code&gt; could be translated to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;['bkp', 'h5'],['wkrp', 'x']&lt;/code&gt; where the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;'x'&lt;/code&gt; flag indicates a piece should be removed.&lt;/li&gt;
  &lt;li&gt;The move &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;O-O-O&lt;/code&gt; is translated to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;['wk','c1'],['wqr','d1']&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;The move &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;a8=Q&lt;/code&gt; could be translated to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;['wqrp','a8'],['wqrp','p'],['wQ','a8']&lt;/code&gt; where the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;'p'&lt;/code&gt; flag indicates to promote the piece and remove it from the board and replace it with the piece in the subsequent tuple, a white queen at position &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;a8&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;After making this translation, we update our board state once per each move
    e.g.,&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;board[piece].position = nextPosition&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;and/or&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;delete board[piece]&lt;/code&gt;&lt;/p&gt;</content><author><name>matthew</name></author><summary type="html">All 32 pieces and occupied positions are represented in a dictionary can be retrieved in a manner like:</summary></entry><entry><title type="html">Finding Knight Moves</title><link href="/2020/12/09/Finding-Knight-Moves.html" rel="alternate" type="text/html" title="Finding Knight Moves" /><published>2020-12-09T00:00:00+01:00</published><updated>2020-12-09T00:00:00+01:00</updated><id>/2020/12/09/Finding%20Knight%20Moves</id><content type="html" xml:base="/2020/12/09/Finding-Knight-Moves.html">&lt;p&gt;In a manner similar to finding bishop moves, this &lt;a name=&quot;piecewise&quot;&gt;piecewise function &lt;a&gt;&lt;/a&gt; can be used to find all knight moves.&lt;/a&gt;&lt;/p&gt;

\[f(x) = \begin{cases}
x+1 \text{ if } x = -2  \\
x-1, \text{ if } x = -1 \\
x+1, \text{ if }  x = 1 \\
x-1  \text{ if } x=2 
\end{cases}\]

&lt;p&gt;The domain is: \(\{x \in \mathbb{I} \mid -2 \leq x \leq 2 \text{ and } x \neq 0 \}\)&lt;/p&gt;

&lt;p&gt;Half of the possible moves can be found by finding \(f(x)\) for all values in the domain.&lt;/p&gt;

&lt;p&gt;To find the remaining directions, use a vertical reflection of the function, \(-f(x)\)&lt;/p&gt;

&lt;p&gt;After gathering the possible values, truncate any moves that yield coordinates that do not exist on the board.&lt;/p&gt;

&lt;p&gt;Example:&lt;/p&gt;

&lt;p&gt;Calculate possible moves for a knight &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;d5&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Current Position: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;d5 = [5,4]&lt;/code&gt;.  We refer to this later as &lt;a name=&quot;pxpy&quot;&gt; \((p_x, p_y)\) &lt;/a&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;Get all move changes in each direction:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;For all values&lt;/em&gt; \(x\) &lt;em&gt;in the domain of&lt;/em&gt; \(f(x)\) &lt;em&gt;:&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;moves1&lt;/em&gt; \(= [(-2, f(2)), (-1, f(1)), (1, f(1)), (2, f(2))]\)&lt;/p&gt;

&lt;p&gt;&lt;em&gt;moves2&lt;/em&gt; \(= [(-2, -f(2)), (-1, -f(1)), (1, -f(1)), (2, -f(2))]\)&lt;/p&gt;

&lt;p&gt;&lt;em&gt;return moves1, moves2&lt;/em&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;This operation returns the values &lt;sup id=&quot;fnref:2&quot; role=&quot;doc-noteref&quot;&gt;&lt;a href=&quot;#fn:2&quot; class=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt;.:&lt;/p&gt;

&lt;p&gt;&lt;em&gt;moves1&lt;/em&gt; = \([(-2, -1), (-1,-2), (1,2), (2,1)]\)&lt;/p&gt;

&lt;p&gt;&lt;em&gt;moves2&lt;/em&gt; = \([(-2,1), (-1,2), (1,-2), (2,-1)]\)&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;Find new positions:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;For each value-pair \((x_i, y_i)\) in moves1, moves2 and current position &lt;a href=&quot;#pxpy&quot;&gt;\((p_x, p_y)\):&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;new_position&lt;/em&gt; = \((p_x + x_i, p_y + y_i)\)&lt;/p&gt;

&lt;p&gt;&lt;em&gt;If new_position is valid: &lt;sup id=&quot;fnref:3&quot; role=&quot;doc-noteref&quot;&gt;&lt;a href=&quot;#fn:3&quot; class=&quot;footnote&quot;&gt;2&lt;/a&gt;&lt;/sup&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;return new_position&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/chess/images/knight_moves.png&quot; alt=&quot;knight moves&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Considering our original position of \([5,4]\), the new positions calculated from &lt;em&gt;moves1&lt;/em&gt; would be: \([1,4], [2,3], [5,7], [6,6]\)&lt;/p&gt;

&lt;p&gt;And we map these back to positions &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;'a4', 'b3', 'e7', 'f6'&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;(Continue in the manner for &lt;em&gt;moves2&lt;/em&gt;)&lt;/p&gt;

&lt;p&gt;Graph of knight moves graphed using the &lt;a href=&quot;#piecewise&quot;&gt;piecewise&lt;/a&gt; function on &lt;a href=&quot;https://www.desmos.com/calculator/osdzle1man&quot;&gt;desmos&lt;/a&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;Footnotes:&lt;/p&gt;

&lt;div class=&quot;footnotes&quot; role=&quot;doc-endnotes&quot;&gt;
  &lt;ol&gt;
    &lt;li id=&quot;fn:2&quot; role=&quot;doc-endnote&quot;&gt;
      &lt;p&gt;Practically, all of these values could be held in a single list but we keep them separated for cleaner display. &lt;a href=&quot;#fnref:2&quot; class=&quot;reversefootnote&quot; role=&quot;doc-backlink&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:3&quot; role=&quot;doc-endnote&quot;&gt;
      &lt;p&gt;A valid position has an \(x\) value between 1-7 and a \(y\) value betwen 1-7 &lt;a href=&quot;#fnref:3&quot; class=&quot;reversefootnote&quot; role=&quot;doc-backlink&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/div&gt;</content><author><name>matthew</name></author><summary type="html">In a manner similar to finding bishop moves, this piecewise function can be used to find all knight moves.</summary></entry><entry><title type="html">Finding Bishop Moves</title><link href="/2020/12/08/Finding-Bishop-Moves.html" rel="alternate" type="text/html" title="Finding Bishop Moves" /><published>2020-12-08T00:00:00+01:00</published><updated>2020-12-08T00:00:00+01:00</updated><id>/2020/12/08/Finding%20Bishop%20Moves</id><content type="html" xml:base="/2020/12/08/Finding-Bishop-Moves.html">&lt;p&gt;To parse a move for a bishop &lt;em&gt;e.g.&lt;/em&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Bb3&lt;/code&gt; we have to implicitly disambiguate between our bishops to determine which one can legally move to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;b3&lt;/code&gt;. (Remember that we already know whether it’s black or white’s turn)&lt;/p&gt;

&lt;p&gt;There are a couple of approaches available:&lt;/p&gt;

&lt;p&gt;First, observe that black’s king bishop and white’s queen bishop can only occupy white squares while black’s queen bishop and white’s king bishop can only occupy black squares.&lt;/p&gt;

&lt;p&gt;We could easily devise a table of white and black squares and determine which bishop to move.  If it is black’s turn, only the queen bishop can move to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;b3&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;While this approach will work, the intervening squares were not calculated.  If white’s king bishop moved from &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;a8&lt;/code&gt; to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;h1&lt;/code&gt;, the path of squares traversed is not known.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/chess/images/bishop_move_unkn_squares.png&quot; alt=&quot;uknown squares&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Having this information could be useful for calculating the diagonal that the bishop is attacking or defending.&lt;/p&gt;

&lt;p&gt;A second, distantly important utility would be an exceedingly rare edge case of same-square bishop disambiguation for an under-promotion event &lt;sup id=&quot;fnref:1&quot; role=&quot;doc-noteref&quot;&gt;&lt;a href=&quot;#fn:1&quot; class=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt;.&lt;/p&gt;

&lt;p&gt;To achieve this second approach, we perform some some simple arithmetic calculations to find the possible moves a bishop can make.  By representing the square positions as x, y coordinate units, we can add or subtract to find intervening squares .  In this system, the square(s) &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;a1&lt;/code&gt; is represented as &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;[1,1]&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;h8 = [8,8]&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;a8 = [1,8]&lt;/code&gt;, and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;h1 = [8,1]&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/chess/images/bishop_moves_xy_coords.png&quot; alt=&quot;board xy coords&quot; /&gt;&lt;/p&gt;

&lt;p&gt;A new square position can be determined through an arithmetic calculation and then mapping the new position back to a named chess position, e.g., &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;[2,2] = b2&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Calculation example:&lt;/p&gt;

&lt;p&gt;Current position: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;a1 = [1,1]&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Movement: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;[3,3]&lt;/code&gt;&lt;/p&gt;

\[[1+3, 1+3]  = [4,4]\]

&lt;p&gt;New Position &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;[4,4] = d4&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;This &lt;a name=&quot;piecewise&quot;&gt;piece-wise function &lt;a&gt;&lt;/a&gt; can be used to find all bishop moves, starting with increasing rank and file.&lt;/a&gt;&lt;/p&gt;

\[f(x) = \begin{cases}
x, \text{ if }  1 \leq x \leq 7 
\end{cases}\]

&lt;p&gt;To find the remaining directions, use horizontal and vertical reflections of the function. Limit the domain of input to \(x\) values between 1 and 7.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Increasing rank and decreasing file: \(f(-x)\)&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Decreasing rank and increasing file: \(-f(x)\)&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Decreasing rank and decreasing file: \(-f(-x)\)&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;After gathering the possible values, truncate any moves that yield coordinates that do not exist on the board.&lt;/p&gt;

&lt;p&gt;Example:&lt;/p&gt;

&lt;p&gt;Calculate possible moves for a black square bishop on &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;a1&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Current Position: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;d5 = [5,4]&lt;/code&gt;.  We refer to this later as &lt;a name=&quot;pxpy&quot;&gt; \((p_x, p_y)\) &lt;/a&gt;&lt;/p&gt;

&lt;hr /&gt;
&lt;p&gt;&lt;strong&gt;Get all move changes in each direction:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;For an integer&lt;/em&gt; \(x_0\) to \(x_n\) in &lt;em&gt;range&lt;/em&gt; \([1..7]\) :&lt;/p&gt;

&lt;p&gt;&lt;em&gt;diagonal1&lt;/em&gt; \(= [(x_0, f(x_0), ( x_1, f(x_1), \dots, (x_n, f(x_n)) ]\)&lt;/p&gt;

&lt;p&gt;&lt;em&gt;diagonal2&lt;/em&gt; \(= [( -x_0, f(x_0), ( -x_1, f(x_1), \dots, (- x_n, f(x_n)) ]\)&lt;/p&gt;

&lt;p&gt;&lt;em&gt;diagonal3&lt;/em&gt; \(= [(x_0, f(-x_0), ( x_1, f(-x_1), \dots, (x_n, f(-x_n)) ]\)&lt;/p&gt;

&lt;p&gt;&lt;em&gt;diagonal4&lt;/em&gt; \(= [(- x_0, f(-x_0), ( - x_1, f(-x_1), \dots, (-x_n, f(-x_n)) ]\)&lt;/p&gt;

&lt;p&gt;&lt;em&gt;return diagonal1, diagonal2, diagonal3, diagonal4&lt;/em&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;This operation returns the values &lt;sup id=&quot;fnref:2&quot; role=&quot;doc-noteref&quot;&gt;&lt;a href=&quot;#fn:2&quot; class=&quot;footnote&quot;&gt;2&lt;/a&gt;&lt;/sup&gt;.:&lt;/p&gt;

&lt;p&gt;&lt;em&gt;diagonal1&lt;/em&gt; = \([(1,1),(2,2),(3,3),(4,4),(5,5),(6,6),(7,7)]\)&lt;/p&gt;

&lt;p&gt;&lt;em&gt;diagonal2&lt;/em&gt; = \([(-1,1),(-2,2),(-3,3),(-4,4),(-5,5),(-6,6),(-7,7)]\)&lt;/p&gt;

&lt;p&gt;&lt;em&gt;diagonal3&lt;/em&gt; = \([(1,-1),(2,-2),(3,-3),(4,-4),(5,-5),(6,-6),(7,-7)]\)&lt;/p&gt;

&lt;p&gt;&lt;em&gt;diagonal4&lt;/em&gt; = \([(-1,-1),(-2,-2),(-3,-3),(-4,-4),(-5,-5),(-6,-6),(-7,-7)]\)&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;Find new positions:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;For each value-pair \((x_i, y_i)\) in diagonal1, diagonal2, diagonal3, diagonal4 and current position &lt;a href=&quot;#pxpy&quot;&gt;\((p_x, p_y)\):&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;new_position&lt;/em&gt; = \((p_x + x_i, p_y + y_i)\)&lt;/p&gt;

&lt;p&gt;&lt;em&gt;If new_position is valid: &lt;sup id=&quot;fnref:3&quot; role=&quot;doc-noteref&quot;&gt;&lt;a href=&quot;#fn:3&quot; class=&quot;footnote&quot;&gt;3&lt;/a&gt;&lt;/sup&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;return new_position&lt;/em&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;Considering our original position of \([4,5]\), the new positions calculated from &lt;em&gt;diagonal1&lt;/em&gt; would be: \([5,4], [6,5], [7,6]\)&lt;/p&gt;

&lt;p&gt;And we map these back to positions &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;'e6', 'f7', 'g8'&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/chess/images/bishop_calculated_positions.png&quot; alt=&quot;calculated coords&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Graph of bishop moves graphed using the &lt;a href=&quot;#piecewise&quot;&gt;piecewise&lt;/a&gt; function on &lt;a href=&quot;https://www.desmos.com/calculator/f5r2p3cohd&quot;&gt;desmos&lt;/a&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;Footnotes:&lt;/p&gt;

&lt;div class=&quot;footnotes&quot; role=&quot;doc-endnotes&quot;&gt;
  &lt;ol&gt;
    &lt;li id=&quot;fn:1&quot; role=&quot;doc-endnote&quot;&gt;
      &lt;p&gt;Under promotion to bishop is noteworthy for these &lt;a href=&quot;https://www.chess.com/blog/SamCopeland/the-rarest-chess-move-underpromoting-to-a-bishop&quot;&gt;championship games&lt;/a&gt; where it avoided stalemate. &lt;a href=&quot;#fnref:1&quot; class=&quot;reversefootnote&quot; role=&quot;doc-backlink&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:2&quot; role=&quot;doc-endnote&quot;&gt;
      &lt;p&gt;Practically, all of these values could be held in a single list but we keep them separated for cleaner display. &lt;a href=&quot;#fnref:2&quot; class=&quot;reversefootnote&quot; role=&quot;doc-backlink&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:3&quot; role=&quot;doc-endnote&quot;&gt;
      &lt;p&gt;A valid position has an \(x\) value between 1-7 and a \(y\) value betwen 1-7 &lt;a href=&quot;#fnref:3&quot; class=&quot;reversefootnote&quot; role=&quot;doc-backlink&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/div&gt;</content><author><name>matthew</name></author><summary type="html">To parse a move for a bishop e.g., Bb3 we have to implicitly disambiguate between our bishops to determine which one can legally move to b3. (Remember that we already know whether it’s black or white’s turn)</summary></entry><entry><title type="html">Reading Portable Game Notation (pgn)</title><link href="/2020/12/07/Reading-Portable-Game-Notation.html" rel="alternate" type="text/html" title="Reading Portable Game Notation (pgn)" /><published>2020-12-07T00:00:00+01:00</published><updated>2020-12-07T00:00:00+01:00</updated><id>/2020/12/07/Reading%20Portable%20Game%20Notation</id><content type="html" xml:base="/2020/12/07/Reading-Portable-Game-Notation.html">&lt;p&gt;&lt;img src=&quot;/chess/images/reading_pgn.gif&quot; alt=&quot;Reading PGN&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The &lt;a href=&quot;https://opensource.apple.com/source/Chess/Chess-110.0.6/Documentation/PGN-Standard.txt&quot;&gt;pgn&lt;/a&gt; format is widely used to notate the plays in a game of chess.  It seems natural to use pgn files to drive the movement of pieces in the visualization since adopting this standard would permit us to visualize any game.  While pgn is designed to be human-readable and easily read by computers, there are tradeoffs in the data representation that require some extra work to translate the notation of a given move into an action to drive the visualization.&lt;/p&gt;

&lt;h4 id=&quot;interpreting-the-pgn-format&quot;&gt;Interpreting the pgn format&lt;/h4&gt;

&lt;p&gt;A move described in a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pgn&lt;/code&gt; file is written in standard algebraic notation (SAN) and contains implicit meaning:
&lt;em&gt;e.g&lt;/em&gt;.&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;e4&lt;/code&gt; implies to move a white or black pawn to the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;e4&lt;/code&gt; square.  In the opening moves of the game, only white’s king pawn can make this move.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Nf3&lt;/code&gt; implies to move a white or black knight to the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;f3&lt;/code&gt; square.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Within the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.pgn&lt;/code&gt; file, the moves are given as pairs. Since white always begins the game we can read a move as follows:&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;1. e4 c5&lt;/code&gt; means that white opens by moving their king pawn to e4 and black responds by moving their queen’s bishop pawn to c5.&lt;/p&gt;

&lt;h4 id=&quot;obtaining-and-parsing&quot;&gt;Obtaining and parsing&lt;/h4&gt;

&lt;p&gt;For our datasource, we &lt;a href=&quot;https://chessmicrobase.com/microbases/10?token=1koly5lq&quot;&gt;Chess Microbase&lt;/a&gt; for its 1000 publicly available games for download in the .pgn format.  This project starts with &lt;a href=&quot;https://chessmicrobase.com/microbases/10/games/709?token=1koly5lq&quot;&gt;Brown vs. Quinteros&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Parsing the entire &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.pgn&lt;/code&gt; is beyond the scope of this project and there are already many excellent solutions available.   We choose &lt;a href=&quot;https://github.com/Aditya-ds-1806&quot;&gt;Aditya DS’s&lt;/a&gt; excellent &lt;a href=&quot;https://aditya-ds-1806.github.io/Chess-PGN-Parser/#/&quot;&gt;Chess PGN Parser&lt;/a&gt; for its ability to parse a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.pgn&lt;/code&gt; into &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.json&lt;/code&gt;. (the format used for this project)&lt;/p&gt;

&lt;h4 id=&quot;translating-implicit-moves&quot;&gt;Translating Implicit Moves&lt;/h4&gt;

&lt;p&gt;All moves are stored in the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;moves&lt;/code&gt; array.&lt;/p&gt;
&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;moves&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;e4&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;c5&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;Nf3&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;Kf3&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;  
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;We deduce white’s turn or black’s turn by the index of the move:&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;index&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// white's move&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;While the goal is to let &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;d3&lt;/code&gt; use a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.pgn&lt;/code&gt; game file and drive the placement and movement of pieces within the DOM, we don’t have enough information for parsing a move like &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Nf3&lt;/code&gt;.&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Which of the four knights is moving to “f3”?&lt;/li&gt;
  &lt;li&gt;What is the starting square?&lt;br /&gt;
While trying to avoid tracking the entire board state, we use make use of a utility function that returns the possible moves for each knight on the board.&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// get the moves for the knight on square g1 &lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;potentialMoves&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;knightMoves&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;g1&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;  
&lt;span class=&quot;c1&quot;&gt;// returns [&quot;e2&quot;,&quot;f3&quot;,&quot;h3&quot;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Iterate through the potential moves for each knight and determine whether or not it contains “f3”.  In this case, white’s king knight moves from “g1” to “f3”.&lt;/p&gt;

&lt;p&gt;The same logic was used for determining which bishop or rook should move.&lt;/p&gt;

&lt;p&gt;Commit &lt;a href=&quot;https://github.com/matthewdhull/chess/commit/2b859d5093124fd2b29b2b85d95454309bcf9ebe&quot;&gt;2b859d&lt;/a&gt;&lt;/p&gt;</content><author><name>matthew</name></author><summary type="html"></summary></entry><entry><title type="html">Exploring Piece Movement</title><link href="/2020/12/05/Exploring-Piece-Movement.html" rel="alternate" type="text/html" title="Exploring Piece Movement" /><published>2020-12-05T00:00:00+01:00</published><updated>2020-12-05T00:00:00+01:00</updated><id>/2020/12/05/Exploring%20Piece%20Movement</id><content type="html" xml:base="/2020/12/05/Exploring-Piece-Movement.html">&lt;p&gt;By using D3’s &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.transition()&lt;/code&gt; function, let’s  explore how animate  the movement of a piece to a new position.   For this example, we move white’s king pawn &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;wkp&lt;/code&gt; to E4.&lt;/p&gt;

&lt;p&gt;Bind the movement event to a button so we can control when the  move is triggered.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;d3.select(&quot;#start&quot;).on(&quot;click&quot;, function() {...}&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;We can access the coordinates of E4 as:&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;var newPosition = positions[&quot;E4&quot;]&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Then, select &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;wkp&lt;/code&gt; and assign the E4 position to the pieces transform translation attribute.  To animate this position change, use the  &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.transition())&lt;/code&gt; function before assigning the new translation.&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;d3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;select&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;#wkp&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;transition&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;attr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;transform&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;translate(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;newPosition&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;25&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;newPosition&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;24&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/matthewdhull/chess/blob/9c2f5950a3ebfce514cbc1a015da841276a030af/board.html#L213&quot;&gt;full code&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/chess/images/single_piece_movement.png&quot; alt=&quot;Single Piece Movement&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Commit &lt;a href=&quot;https://github.com/matthewdhull/chess/commit/9c2f5950a3ebfce514cbc1a015da841276a030af&quot;&gt;9c2f595&lt;/a&gt;&lt;/p&gt;</content><author><name>matthew</name></author><summary type="html">By using D3’s .transition() function, let’s explore how animate the movement of a piece to a new position. For this example, we move white’s king pawn wkp to E4.</summary></entry><entry><title type="html">Remaining Pieces, re-factored initial piece layout</title><link href="/2020/12/04/Adding-Remaining-Pieces.html" rel="alternate" type="text/html" title="Remaining Pieces, re-factored initial piece layout" /><published>2020-12-04T00:00:00+01:00</published><updated>2020-12-04T00:00:00+01:00</updated><id>/2020/12/04/Adding%20Remaining%20Pieces</id><content type="html" xml:base="/2020/12/04/Adding-Remaining-Pieces.html">&lt;ul&gt;
  &lt;li&gt;All piece types (king, queen, bishop, knight, rook, pawn) have a defined path in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pieces.js&lt;/code&gt;.  We store a piece’s information in the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;start_positions&lt;/code&gt; dictionary and use this data in our &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;d3.selectAll(&quot;path&quot;)...&lt;/code&gt; call.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;e.g., Black’s Queen Rook is named “bqr” and has the following data:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&quot;bqr&quot;:{
	&quot;path&quot;: rook_path
	, &quot;position&quot;: &quot;A8&quot;
	, &quot;fill&quot;: black_piece_fill
	, &quot;stroke&quot;: black_piece_stroke }
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;and append as seen &lt;a href=&quot;https://github.com/matthewdhull/chess/blob/44f5efe90eef3ee326224ad0e1cd50baf7cd25d8/board.html#L171&quot;&gt;here&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/chess/images/remaining_pieces.png&quot; alt=&quot;Remaining Pieces&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Commit &lt;a href=&quot;https://github.com/matthewdhull/chess/commit/44f5efe90eef3ee326224ad0e1cd50baf7cd25d8&quot;&gt;44f5efe&lt;/a&gt;&lt;/p&gt;</content><author><name>matthew</name></author><summary type="html">All piece types (king, queen, bishop, knight, rook, pawn) have a defined path in pieces.js. We store a piece’s information in the start_positions dictionary and use this data in our d3.selectAll(&quot;path&quot;)... call.</summary></entry><entry><title type="html">Piece path and positioning</title><link href="/2020/12/03/Piece-Positioning.html" rel="alternate" type="text/html" title="Piece path and positioning" /><published>2020-12-03T00:00:00+01:00</published><updated>2020-12-03T00:00:00+01:00</updated><id>/2020/12/03/Piece%20Positioning</id><content type="html" xml:base="/2020/12/03/Piece-Positioning.html">&lt;ul&gt;
  &lt;li&gt;Using &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pieces.js&lt;/code&gt; to hold the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;d&lt;/code&gt; value to specify the path to be drawn for a piece.  We start by drawing a rook.  To position the it, we use the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;positions&lt;/code&gt; dictionary and get the coordinates for where to  place the rook path within the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;svg&lt;/code&gt; element.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Getting the position:&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;positions&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;A8&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;positions&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;A8&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;/chess/images/piece_positioning.png&quot; alt=&quot;Piece Positioning&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Commit &lt;a href=&quot;https://github.com/matthewdhull/chess/commit/b61e48f98534bceeb376048c64415a57f128b5b6&quot;&gt;b61e48f&lt;/a&gt;&lt;/p&gt;</content><author><name>matthew</name></author><summary type="html">Using pieces.js to hold the d value to specify the path to be drawn for a piece. We start by drawing a rook. To position the it, we use the positions dictionary and get the coordinates for where to place the rook path within the svg element.</summary></entry></feed>